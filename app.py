import warnings

# Suppress all deprecation warnings globally
warnings.simplefilter("ignore", DeprecationWarning)

import streamlit as st
from langchain.document_loaders import JSONLoader
from langchain.vectorstores import FAISS
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.prompts import PromptTemplate
from langchain.chat_models import ChatOpenAI
from langchain.chains import LLMChain
from dotenv import load_dotenv
import logging
import csv

warnings.filterwarnings("ignore", category=DeprecationWarning)
    
for name in logging.Logger.manager.loggerDict.keys():
    logging.getLogger(name).setLevel(logging.CRITICAL)

load_dotenv(override=True)

# 4. Setup LLMChain & prompts
thinking_model = ChatOpenAI(temperature=0, model="gpt-4o-mini-2024-07-18")
conversational_model = ChatOpenAI(temperature=0, model="gpt-4o-mini-2024-07-18")

template_thinking_model = """
You are a middle AI agent who works in the middle of a powerplant company and their conversatonal AI who is the end face who will report this insights to the user in natural language.
I will share the ground level report of the account balances for the month january of the year 2025 of the powerplant company and the user's message. You will follow ALL of the rules below:

1/ You should check and return all the data in text if it is necessary to answer the user's message.

2/ You should analyse or do any necessary calculations and return them as well but very precisely menetioning what this exact value means.

3/ Do not return guides to do calculations or get certain information as the conversation agent (AI) doesn't have any access to the raw data of reporting. Always do all the necessary calculations and return the results.

4/ If the given user message is completely irrelevant to the given report or the data, then you should only return "IRRELEVANT" and nothing else. Not even a word of saying that it is irrelevant. Just output "IRRELEVANT" nothing else.

5/ Try to give as much as context as possible as the conversational AI agent's response will completely depend on the response you give. When providing numbers or calculation results you can provide the raw data you got from the report as reference so it would be easier for the conversational AI agent to explain it to the user.

this is the user's message ; {message}

this the ground level report of the account balance of the company for january 2025 in csv format.
Regarding this report use the following keywords when referring, PM - previous month which is December 2024, PY - previous year which is January 2024
; {gl_report_jan_2025}

You do not have to be emotional or natural language in your response, you should be very precise and technical in your response as you are communicating with another AI.
"""

template_conversation_model = """
You are a conversational AI assistant who works with structered data of a powerplant company and report insights in natural language to the users, who will be the management level of the company.
I will share the relevant data that I got filtered from a ground level report of the powerplant company only regarding the month january of 2025 which was generated by a middle thiking AI agent [You should never expose about this thinking model to the user], and you will follow ALL of the rules below:

1/ You should always be conversational and friendly as you are handling the end user who is the management level of the company directly.

2/ You should make a proper structure of the response and make it very easy to read and understand for the user. Make sure to explain if something is complex or technical in a very simple way.

3/ You will be provided the domain knowledge of the powerplant company, so always make sure to blend this domain knwoledge with the data you are provided ONLY if necessary.

4/ If you get the response "IRRELEVANT" from the middle AI agent that means the middle agent has decided that the user's message is completely irrelevant to the given report or the data.
In this case explain to the user that the message is irrelevant and you are not able to provide any insights or information regarding this message as you only have access to the financial data of the january 2025 and the compared data of the previous month and the previous year to that period.
If the user's message is also irrelevant and nothing related to the topic, then just simply tell the user that you are unable to help with this and refer him other cloud based, popular AI tools which can help him with this.

this is the user's message ; {message}

Below is the relevant report data the program received after going through the ground level report data. This was generated by a middle thinking AI agent [You should never expose about this thinking model to the user]:
{relevant_data}

Here is the brief of the powerplant company and the domain knowledge of the company ; {acwa_company_brief}
"""

prompt_th = PromptTemplate(
    input_variables=["message", "gl_report_jan_2025"],
    template=template_thinking_model
)

prompt_co = PromptTemplate(
    input_variables=["message", "relevant_data", "acwa_company_brief"],
    template=template_conversation_model
)

chain_th = LLMChain(llm=thinking_model, prompt=prompt_th)
chain_co = LLMChain(llm=conversational_model, prompt=prompt_co)

# 5. Retrieval augmented generation
def generate_response_for_thinking(message):
    with open("gl-report-25-january.txt", "r") as file:
        gl_report_jan_2025 = file.read()
    response = chain_th.run(message=message, gl_report_jan_2025=gl_report_jan_2025)
    return response

def generate_response_for_convo(message, relevant_data):
    with open("acwa_company_brief.txt", "r") as file:
        acwa_company_brief = file.read()
    response = chain_co.run(message=message, relevant_data=relevant_data, acwa_company_brief=acwa_company_brief)
    return response

def on_submit():
    st.session_state["show_loading"] = True
    st.session_state["show_result"] = False

# def return_example(idx):
#     examples = {
#         1: "CREATE TABLE subscribers (subscriber_id SERIAL PRIMARY KEY, subscriber_name TEXT, subscription_plan TEXT CHECK (subscription_plan IN ('basic', 'premium', 'enterprise')), subscription_start DATE DEFAULT CURRENT_DATE, subscription_end DATE) DISTRIBUTED BY (subscriber_id);",
#         2: "CREATE TABLE billing (bill_id SERIAL PRIMARY KEY, subscriber_id INT, billing_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, total_amount NUMERIC CHECK (total_amount >= 0)) PARTITION BY RANGE (billing_date) (START ('2023-01-01') END ('2024-01-01') EVERY ('1 MONTH')) DISTRIBUTED BY (bill_id);",
#         3: "CREATE EXTERNAL TABLE sms_logs (message_id INT, sender_number TEXT, receiver_number TEXT, timestamp TIMESTAMP, message_status TEXT CHECK (message_status IN ('sent', 'failed'))) LOCATION ('s3://telecom-dw/sms_logs/') FORMAT 'CSV' LOG ERRORS;",
#         4: "CREATE TABLE network_events (event_id SERIAL PRIMARY KEY, event_type TEXT CHECK (event_type IN ('outage', 'maintenance', 'upgrade')), region TEXT, event_start TIMESTAMP NOT NULL, event_end TIMESTAMP, duration INTERVAL GENERATED ALWAYS AS (event_end - event_start)) DISTRIBUTED BY (region);",
#         5: "CREATE OR REPLACE FUNCTION add_transaction(p_customer_id INT, p_transaction_amount NUMERIC, p_payment_method TEXT, p_transaction_status TEXT, p_discount_applied BOOLEAN DEFAULT FALSE) RETURNS VOID AS $$BEGIN INSERT INTO customer_transactions(customer_id, transaction_date, transaction_amount, payment_method, transaction_status, discount_applied) VALUES(p_customer_id, CURRENT_TIMESTAMP, p_transaction_amount, p_payment_method, p_transaction_status, p_discount_applied);END;$$ LANGUAGE plpgsql;"
#     }
#     st.session_state["message"] = examples.get(idx, "")
#     st.session_state["show_result"] = False

# 6. Streamlit App
def main():
    st.set_page_config(
        page_title="ACWA Conversational Assistant :satellite::milky_way:", page_icon=":milky_way:")

    st.header("ACWA Conversational Assistant :satellite::milky_way:")

    if "message" not in st.session_state:
        st.session_state["message"] = ""

    message = st.text_area("type", key="message", label_visibility="collapsed")

    # Add empty space before buttons
    st.write("")
    
    # Add square buttons
    text1, text2, col1, col2, col3, col4, col5, col6 = st.columns([1, 0.7, 0.15, 0.15, 0.15, 0.15, 0.15, 0.4])
    with text1:
        st.write("")
    # with text2:
        # st.write("Example pormpts :point_right:")
    # with col1:
    #     st.button("1", key="btn1", on_click=lambda: return_example(1))
    # with col2:
    #     st.button("2", key="btn2", on_click=lambda: return_example(2))
    # with col3:
    #     st.button("3", key="btn3", on_click=lambda: return_example(3))
    # with col4:
    #     st.button("4", key="btn4", on_click=lambda: return_example(4))
    # with col5:
    #     st.button("5", key="btn5", on_click=lambda: return_example(5))
    with col6:
        st.button("Enter", key="submit", type="primary", on_click=on_submit)

    # Add empty space after buttons
    st.write("")

    if st.session_state["message"] and st.session_state["show_loading"]:
        # st.write("Generating best practice snowflake :snowflake: conversion...")
        message = st.session_state["message"]
        if message:
            result_th = generate_response_for_thinking(message)
            print("RESULT OF THE THINKING MODEL :", result_th)
            result_co = generate_response_for_convo(message, result_th)
            st.session_state["result"] = result_co
            st.session_state["show_result"] = True
            st.session_state["show_loading"] = False

    # Display result if available
    if "show_result" not in st.session_state or "show_loading" not in st.session_state:
        st.session_state["show_loading"] = False
        st.session_state["show_result"] = False

    if st.session_state["show_result"]:
        st.info(st.session_state["result"])

if __name__ == '__main__':
    main()